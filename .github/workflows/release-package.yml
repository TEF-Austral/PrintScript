name: Release and Publish

on:
  push:
    branches:
      - main

jobs:
  version-and-publish:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para el historial completo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 22
        uses: actions/setup-java@v1
        with:
          java-version: '22'

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Determine version bump
        id: version
        run: |
          # Obtener el último commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Determinar el tipo de incremento basado en conventional commits
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"!"* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == feat:* ]] || [[ "$COMMIT_MSG" == feature:* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == fix:* ]] || [[ "$COMMIT_MSG" == bugfix:* ]] || [[ "$COMMIT_MSG" == patch:* ]]; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT  # Por defecto es patch
          fi

      - name: Update version in gradle.properties
        id: update_version
        run: |
          # Leer la versión actual
          CURRENT_VERSION=$(grep "^version=" gradle.properties | cut -d'=' -f2)
          echo "Current version: $CURRENT_VERSION"
          
          # Separar major, minor y patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Incrementar según el tipo
          if [[ "${{ steps.version.outputs.bump }}" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ steps.version.outputs.bump }}" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          
          # Actualizar gradle.properties
          sed -i "s/version=.*/version=${NEW_VERSION}/" gradle.properties
          
          # Guardar la nueva versión para usarla después
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add gradle.properties
          git commit -m "chore: bump version to ${{ steps.update_version.outputs.new_version }} [skip ci]"

      - name: Push changes
        run: |
          git push

      - name: Create Git tag
        run: |
          git tag "v${{ steps.update_version.outputs.new_version }}"
          git push origin "v${{ steps.update_version.outputs.new_version }}"

      - name: Grant execute permission
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Publish package
        run: ./gradlew publish --no-daemon
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}